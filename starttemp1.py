#!/usr/bin/env python3
import sys
import os, psutil
import subprocess
import networkx as nx
import xml.etree.ElementTree as ET
import yaml
from shutil import copyfile
from bs4 import BeautifulSoup
import codecs
import time
################################################## Execution of JBMC in benchexec ##################################################
try:
 print('Start JBMC benchmarking in Benchexec... ')
 cmd = 'benchexec '+ sys.argv[1] + ' --tool-directory ../jbmc --no-compress-results'
 log = open('log.txt', 'a') 
 subprocess.Popen(['benchexec', sys.argv[1], '--tool-directory', '../jbmc', '--no-compress-results'],stdout=log, stderr=log).wait()
 with open("log.txt", "rt") as fin:
  for line in fin:
   print(line)
 os.remove("log.txt")
 print('Benchmarking finished. ')
#Get the result generated by benchexec, which is saved in a xml file.
 tableXml = line[line.find(' ')+1:line.rfind('\n')]
except subprocess.CalledProcessError as e:
 result = e.output

################################################## Config xml for JBMCValidator #####################################################
result_Xml_File = line[line.find(' ')+1:line.rfind('\n')]
JBMC_taskFile_Root = ET.parse(sys.argv[1]).getroot()
witness_FileName = JBMC_taskFile_Root[0][0].text
for key,value in JBMC_taskFile_Root.find('rundefinition').items():
 taskName = value
witness_File = line[line.find(' ')+1:line.rfind('results')] + 'files' + '/' + taskName + '/'+ '*.yml' + '/' + witness_FileName

task_Validation_Config = 'Tasks_JBMCWitnessValidator.xml'
copyfile(sys.argv[1], task_Validation_Config)
Validator_taskFile = ET.parse(task_Validation_Config)
Validator_taskFile_Root = Validator_taskFile.getroot()
#tool = Validator_taskFile_Root.attrib
Validator_taskFile_Root.set('tool','IBWit4JBMC')

option = Validator_taskFile_Root.find('rundefinition').find('option')
option.set('name','--witness')
option.text = witness_File

Validator_taskFile.write(task_Validation_Config,encoding='UTF-8',xml_declaration=True)

################################################## Execution of JBMCValidator in benchexec(IB) ###########################################
try:
 print('Start JBMCWitnessValidator benchmarking in Benchexec... ')
 log = open('log.txt', 'a')
 subprocess.Popen(['benchexec', 'Tasks_JBMCWitnessValidator.xml', '--tool-directory', '../jbmc', '--no-compress-results'],stdout=log).wait()
 with open("log.txt", "rt") as fin1:
  for line1 in fin1:
   print(line1)
 os.remove("log.txt")
 print('Benchmarking finished. ')
 tableXml1 = line1[line1.find(' ')+1:line1.rfind('\n')]

except subprocess.CalledProcessError as e:
 result = e.output
 exit(1)

################################################## Execution of JBMCValidator in benchexec ###########################################

Validator_taskFile_Root.set('tool','UBWit4JBMC')
Validator_taskFile.write(task_Validation_Config,encoding='UTF-8',xml_declaration=True)

try:
 print('Start JBMCWitnessValidator benchmarking in Benchexec... ')
 log = open('log.txt', 'a')
 subprocess.Popen(['benchexec', 'Tasks_JBMCWitnessValidator.xml', '--tool-directory', '../jbmc', '--no-compress-results'],stdout=log).wait()
 with open("log.txt", "rt") as fin2:
  for line2 in fin2:
   print(line2)
 os.remove("log.txt")
 print('Benchmarking finished. ')
 tableXml2 = line2[line2.find(' ')+1:line2.rfind('\n')]

except subprocess.CalledProcessError as e:
 result = e.output
 exit(1)



###################################################### generate table #################################################################
tables = []
tables.append(tableXml)
tables.append(tableXml1)
tables.append(tableXml2)
table = ET.parse('table.xml')
table_Root = table.getroot()
for result,ta in zip(table_Root.iter('result'),tables):
 result.set('filename',ta)
table.write('table.xml',encoding='UTF-8',xml_declaration=True)

try:
 subprocess.Popen(['table-generator', '-x', 'table.xml']).wait()
except subprocess.CalledProcessError as e:
 print(e)
 exit(1)
exit(0)
