#!/bin/bash
# tool

TOOL_BINARY=./jbmc-binary
TOOL_NAME=JBMC
FIND_OPTIONS="-name '*.java'"
JVM_HOME=/usr/lib/jvm/java-8-openjdk-amd64

# function to run the tool

run()
{
  mkdir -p $BM_DIR/classes
  mkdir -p $BM_DIR/src/org/sosy_lab/sv_benchmarks
  HAS_NONDET=0
  # We have to patch the Verifier interface.
  # Should be upstreamed to sv-benchmarks to make witness checking easier.
  # Make a copy of Verifier.java.
  for f in "${!BM[@]}"; do
    echo "${BM[$f]}" | grep Verifier.java > /dev/null
    if [ $? -eq 0 ] ; then
      VERIFIER_FILE="$BM_DIR/src/org/sosy_lab/sv_benchmarks/Verifier.java"
      cp "${BM[$f]}" $VERIFIER_FILE
      BM[$f]="$VERIFIER_FILE"
    else
      grep "Verifier.nondet" "${BM[$f]}" > /dev/null
      if [ $? -eq 0 ] ; then
        HAS_NONDET=1
      fi
    fi
  done
  # We have to distinguish assumption from assertion failures.
  sed -i 's/Runtime.getRuntime().halt(1);/Runtime.getRuntime().halt(2);/g' $VERIFIER_FILE
  # Let's determinize (uses same inputs for all benchmarks).
  sed -i 's/new Random().nextInt()/11/g' $VERIFIER_FILE
  sed -i 's/new Random().nextBoolean()/false/g' $VERIFIER_FILE
  sed -i 's/new Random().nextLong()/11/g' $VERIFIER_FILE
  sed -i 's/new Random().nextFloat()/11.0f/g' $VERIFIER_FILE
  sed -i 's/new Random().nextDouble()/11.0/g' $VERIFIER_FILE
  sed -i 's/int size = random.nextInt();/int size = 1;/g' $VERIFIER_FILE
  sed -i 's/return new String(bytes);/return "JBMC at SV-COMP 2020";/g' $VERIFIER_FILE
  # Compile
  $JVM_HOME/bin/javac -g -cp $BM_DIR/classes -d $BM_DIR/classes "${BM[@]}"
  # Check whether the file runs
  timeout 10 $JVM_HOME/bin/java -ea -cp $BM_DIR/classes Main >> $LOG.latest 2>&1
  ECR=$?
  EC=42
  # Filter out memouts and other errors
  if [ $ECR -eq 1 ] ; then
    grep -E "java\.lang\.StackOverflowError|java\.lang\.OutOfMemoryError|Error: Could not find or load main class|Error: Main method not found in class" $LOG.latest > /dev/null
    if [ $? -eq 0 ] ; then
      ECR=42
    fi
  fi
  # Assertion failure found
  if [ $ECR -eq 1 ] ; then
    EC=10
    mv $LOG.latest $LOG.ok
    echo "EC=$EC" >> $LOG.ok
  fi
  # No assertion failure, but deterministic
  if [ $ECR -eq 0 ] ; then
    if [ $HAS_NONDET -eq 0 ] ; then
      EC=0
      mv $LOG.latest $LOG.ok
      echo "EC=$EC" >> $LOG.ok
    fi
  fi
  if [ $EC -eq 42 ]; then
    rm $BM_DIR/classes/org/sosy_lab/sv_benchmarks/Verifier.class
    jar -cfe $BM_DIR/task.jar Main -C $BM_DIR/classes .
    export TASK="$BM_DIR/task.jar"

    export MORE_OPTIONS="--java-threading --throw-runtime-exceptions --max-nondet-string-length 100 --classpath core-models.jar"

    if [ "$PROP" = "termination" ] ; then
      PROPERTY="$PROPERTY --no-assertions --no-self-loops-to-assumptions"
    fi

    timeout 875 bash -c ' \
\
ulimit -v 15000000 ; \
\
EC=42 ; \
for c in 2 6 10 15 20 25 30 35 45 60 100 150 200 300 400 500 1025 2049 268435456 ; do \
echo "Unwind: $c" > $LOG.latest ; \
./jbmc-binary $MORE_OPTIONS --graphml-witness $LOG.witness --unwind $c --stop-on-fail --$BIT_WIDTH --object-bits $OBJ_BITS $PROPERTY --function $ENTRY -jar $TASK >> $LOG.latest 2>&1 ; \
ec=$? ; \
if [ $ec -eq 0 ] ; then \
if ! tail -n 10 $LOG.latest | grep -q "^VERIFICATION SUCCESSFUL$" ; then ec=1 ; else \
./jbmc-binary $MORE_OPTIONS --unwinding-assertions --unwind $c --stop-on-fail --$BIT_WIDTH --object-bits $OBJ_BITS $PROPERTY --function $ENTRY -jar $TASK > /dev/null 2>&1 || ec=42 ; \
fi ; \
fi ; \
if [ $ec -eq 10 ] ; then \
if ! tail -n 10 $LOG.latest | grep -q "^VERIFICATION FAILED$" ; then ec=1 ; fi ; \
fi ; \
\
case $ec in \
0) EC=0 ; mv $LOG.latest $LOG.ok ; echo "EC=$EC" >> $LOG.ok ; break ;; \
10) EC=10 ; mv $LOG.latest $LOG.ok ; echo "EC=$EC" >> $LOG.ok ; break ;; \
42) EC=42 ; mv $LOG.latest $LOG.ok ; echo "EC=$EC" >> $LOG.ok ;; \
*) if [ $EC -ne 0 ] ; then EC=$ec ; mv $LOG.latest $LOG.ok ; fi ; echo "EC=$EC" >> $LOG.ok ; break ;; \
esac ; \
\
done \
'
    if [ ! -s $LOG.ok ] ; then
      mv $LOG.latest $LOG.ok ; echo "EC=42" >> $LOG.ok
    fi
  fi
  eval `tail -n 1 $LOG.ok`
}

# main tool wrapper script
# run "make <tool>-wrapper" to generate the wrapper script

# map properties to tool options

declare -A OPTIONS
OPTIONS["label"]="--error-label"
OPTIONS["unreach_call"]=""
OPTIONS["termination"]=""
OPTIONS["overflow"]="--signed-overflow-check --no-assertions"
OPTIONS["memsafety"]="--pointer-check --memory-leak-check --bounds-check --no-assertions"
OPTIONS["memcleanup"]="--pointer-check --memory-leak-check --bounds-check --no-assertions"

parse_property_file()
{
  local fn=$1

  cat $fn | sed 's/[[:space:]]//g' | perl -n -e '
if(/^CHECK\(init\((\S+)\(\)\),LTL\((\S+)\)\)$/) {
  print "ENTRY=$1\n";
  print "PROP=\"label\"\nLABEL=\"$1\"\n" if($2 =~ /^G!label\((\S+)\)$/);
  print "PROP=\"unreach_call\"\n" if($2 =~ /^G!call\(__VERIFIER_error\(\)\)$/);
  print "PROP=\"unreach_call\"\n" if($2 =~ /^Gassert$/);
  print "PROP=\"memsafety\"\n" if($2 =~ /^Gvalid-(free|deref|memtrack)$/);
  print "PROP=\"memcleanup\"\n" if($2 =~ /^Gvalid-memcleanup$/);
  print "PROP=\"overflow\"\n" if($2 =~ /^G!overflow$/);
  print "PROP=\"termination\"\n" if($2 =~ /^Fend$/);
}'
}

parse_result()
{
  if tail -n 50 $LOG.ok | \
      grep -Eq "Unmodelled library functions have been called" ; then
    echo 'UNKNOWN'
  elif tail -n 50 $LOG.ok | \
      grep -Eq "^(\[.*\] .*__CPROVER_memory_leak == NULL|[[:space:]]*__CPROVER_memory_leak == NULL$)" ; then
    if [[ "$PROP" == "memcleanup" ]]; then
      echo 'FALSE(valid-memcleanup)'
    else
      echo 'FALSE(valid-memtrack)'
    fi
  elif tail -n 50 $LOG.ok | \
      grep -Eq "^(\[.*\] |[[:space:]]*)dynamically allocated memory never freed in " ; then
    if [[ "$PROP" == "memcleanup" ]]; then
      echo 'FALSE(valid-memcleanup)'
    else
      echo 'FALSE(valid-memtrack)'
    fi
  elif tail -n 50 $LOG.ok | \
      grep -Eq "^(\[.*\] |[[:space:]]*)dereference failure:" ; then
    echo 'FALSE(valid-deref)'
  elif tail -n 50 $LOG.ok | \
      grep -Eq "^(\[.*\] |[[:space:]]*)array.* (lower|upper) bound in " ; then
    echo 'FALSE(valid-deref)'
  elif tail -n 50 $LOG.ok | \
      grep -Eq "^[[:space:]]+mem(cpy|set|move) (source region readable|destination region writeable)" ; then
    echo 'FALSE(valid-deref)'
  elif tail -n 50 $LOG.ok | \
      grep -Eq "^(\[.*\] double free|[[:space:]]*double free$|[[:space:]]*free argument must be NULL or valid pointer$)" ; then
    echo 'FALSE(valid-free)'
  elif tail -n 50 $LOG.ok | \
      grep -Eq "^(\[.*\] free called for stack-allocated object|[[:space:]]*free called for stack-allocated object$)" ; then
    echo 'FALSE(valid-free)'
  elif tail -n 50 $LOG.ok | \
      grep -Eq "^(\[.*\] free argument has offset zero|[[:space:]]* free argument has offset zero$)" ; then
    if tail -n 50 $LOG.ok | grep -Eq "^[[:space:]]+[a-zA-Z0-9_]+=INVALID-" ; then
      echo 'FALSE(valid-deref)'
    else
      echo 'FALSE(valid-free)'
    fi
  elif tail -n 50 $LOG.ok | \
      grep -Eq "^(\[.*\] |[[:space:]]*)free argument (is|must be) dynamic object" ; then
    if tail -n 50 $LOG.ok | grep -Eq "^[[:space:]]+[a-zA-Z0-9_]+=INVALID-" ; then
      echo 'FALSE(valid-deref)'
    else
      echo 'FALSE(valid-free)'
    fi
  elif tail -n 50 $LOG.ok | \
      grep -Eq "^(\[.*\] |[[:space:]]*)arithmetic overflow on signed" ; then
    echo 'FALSE(no-overflow)'
  elif [[ "$PROP" == "termination" ]]; then
    echo 'FALSE(termination)'
  else
    echo FALSE
  fi
}

process_graphml()
{
  if [ -f $LOG.witness ]; then
    if [ $1 -eq 0 ]; then
      TYPE="correctness_witness"
    else
      TYPE="violation_witness"
    fi
    cat $LOG.witness | perl -p -e "s/(<graph edgedefault=\"directed\">)/\$1\\E
      <data key=\"witness-type\">$(echo $TYPE)<\/data>
      <data key=\"producer\">$(echo $TOOL_NAME)<\/data>
      <data key=\"specification\">$(<$PROP_FILE)<\/data>
      <data key=\"programfile\">$(echo ${BM[0]} | sed 's8/8\\/8g')<\/data>
      <data key=\"programhash\">$(sha1sum ${BM[0]} | awk '{print $1}')<\/data>
      <data key=\"architecture\">${BIT_WIDTH}bit<\/data>\\Q/"
  fi
}

OBJ_BITS="11"
BIT_WIDTH="64"
declare -a BM
BM=()
PROP_FILE=""
WITNESS_FILE=""

while [ -n "$1" ] ; do
  case "$1" in
    --32|--64) BIT_WIDTH="${1##--}" ; shift 1 ;;
    --propertyfile) PROP_FILE="$2" ; shift 2 ;;
    --graphml-witness) WITNESS_FILE="$2" ; shift 2 ;;
    --version) $TOOL_BINARY --version ; exit 0 ;;
    *) SRC=(`eval "find $1 $FIND_OPTIONS"`) ; BM=("${BM[@]}" "${SRC[@]}") ; shift 1 ;;
  esac
done

if [ -z "${BM[0]}" ] || [ -z "$PROP_FILE" ] ; then
  echo "Missing benchmark or property file"
  exit 1
fi

if [ ! -s "${BM[0]}" ] || [ ! -s "$PROP_FILE" ] ; then
  echo "Empty benchmark or property file"
  exit 1
fi

eval `parse_property_file $PROP_FILE`

if [[ "$PROP" == "" ]]; then
  echo "Unrecognized property specification"
  exit 1
elif [[ "$PROP" == "label" ]]; then
  PROPERTY="${OPTIONS[$PROP]} $LABEL"
else
  PROPERTY=${OPTIONS[$PROP]}
fi

export ENTRY
export PROPERTY
export BIT_WIDTH
export BM
export PROP
export OBJ_BITS

export GMON_OUT_PREFIX=`basename ${BM[0]}`.gmon.out

export BM_DIR=`mktemp -d -t ${TOOL_NAME}-benchmark.XXXXXX`

export LOG=`mktemp -t ${TOOL_NAME}-log.XXXXXX`
trap "rm -rf $LOG $LOG.latest $LOG.ok $LOG.witness $LOG.bin $BM_DIR" EXIT

run

if [ ! -s $LOG.ok ] ; then
  exit 1
fi

cat $LOG.ok
case $EC in
  0) if [[ "$WITNESS_FILE" != "" ]]; then process_graphml $EC > $WITNESS_FILE; \
fi; echo "TRUE" ;;
  10) if [[ "$WITNESS_FILE" != "" ]]; then process_graphml $EC > $WITNESS_FILE;\
 fi; parse_result ;;
  *) echo "UNKNOWN" ;;
esac
exit $EC
