import org.junit.Assert;  
import org.junit.Test;  
import org.junit.runner.RunWith;  
import org.powermock.api.mockito.PowerMockito;  
import org.powermock.core.classloader.annotations.PrepareForTest;  
import org.powermock.modules.junit4.PowerMockRunner;  
import org.sosy_lab.sv_benchmarks.Verifier;
import java.util.ArrayList;

@RunWith(PowerMockRunner.class) 
public class ValidationHarness {
  @Test
  @PrepareForTest(Verifier.class)
  public void testCallStaticMethod()
   {
    try
     {
      String type_string = "string_type";
      String data_string = "string_data";
      String[] splited_type = type_string.substring(1).split("\\s+");
      String[] splited_data = data_string.substring(1).split("\\s+");

      ArrayList<Integer> int_values = new ArrayList<Integer>();
      ArrayList<Long> long_values = new ArrayList<Long>();
      ArrayList<Byte> byte_values = new ArrayList<Byte>();
      ArrayList<Character> char_values = new ArrayList<Character>();
      ArrayList<Boolean> boolean_values = new ArrayList<Boolean>();
      ArrayList<Double> double_values = new ArrayList<Double>();
      ArrayList<Short> short_values = new ArrayList<Short>();
      ArrayList<Float> float_values = new ArrayList<Float>();
      for(int i=0;i<splited_type.length;i++){   
       if("int".equals(splited_type[i])){
    	int_values.add(Integer.parseInt(splited_data[i]));
        }
       if("long".equals(splited_type[i])){
    	long_values.add(Long.parseLong(splited_data[i]));
        }
       if("boolean".equals(splited_type[i])){
    	boolean_values.add(Boolean.parseBoolean(splited_data[i]));
        }
       }

      PowerMockito.mockStatic(Verifier.class);
       if(int_values.size() >= 1){
        org.mockito.stubbing.OngoingStubbing<Integer> stubbing = PowerMockito.when(Verifier.nondetInt());
        for(int i=0;i<int_values.size();i++){
         stubbing = stubbing.thenReturn(int_values.get(i));
         }
	}

       if(long_values.size() >= 1){
        org.mockito.stubbing.OngoingStubbing<Long> stubbing = PowerMockito.when(Verifier.nondetLong());
        for(int i=0;i<long_values.size();i++){
	 stubbing = stubbing.thenReturn(long_values.get(i));
	 }
	}

	if(boolean_values.size() >= 1){
	 org.mockito.stubbing.OngoingStubbing<Boolean> stubbing = PowerMockito.when(Verifier.nondetBoolean());
	 for(int i=0;i<boolean_values.size();i++){
         if("0".equals(boolean_values.get(i))){
          stubbing = stubbing.thenReturn(false);
          }
         else{
	  stubbing = stubbing.thenReturn(true);
	  }
         }
	}

      ClassName.main(new String[0]);
     }
      catch(Exception e){
       System.out.println(e);
       System.out.println("Java Exception");
      }
   }
 }
